/*----------------------------------------------------------------------------*/
/* This file is generated by the templates/template.rb script and should not  */
/* be modified manually. See                                                  */
/* templates/javascript/src/visitor.js.erb                                    */
/* if you are looking to modify the                                           */
/* template                                                                   */
/*----------------------------------------------------------------------------*/

import * as nodes from "./nodes.js";

/**
 * A class that knows how to walk down the tree. None of the individual visit
 * methods are implemented on this visitor, so it forces the consumer to
 * implement each one that they need. For a default implementation that
 * continues walking the tree, see the `Visitor` class.
 *
 */
export class BasicVisitor {
  /**
   * Calls `accept` on the given node if it is not `null`, which in turn should
   * call back into this visitor by calling the appropriate `visit*` method.
   *
   * @param {nodes.Node} node
   */
  visit(node) {
    node?.accept(this);
  }

  /**
   * Visits each node in `nodes` by calling `accept` on each one.
   *
   * @param {nodes.Node[]} nodes
   */
  visitAll(nodes) {
    nodes.forEach((node) => {
      node?.accept(this);
    });
  }

  /**
   * Visits the child nodes of `node` by calling `accept` on each one.
   *
   * @param {nodes.Node} node
   */
  visitChildNodes(node) {
    node.compactChildNodes().forEach((childNode) => {
      childNode.accept(this);
    });
  }
}

/**
 * A visitor is a class that provides a default implementation for every accept
 * method defined on the nodes. This means it can walk a tree without the
 * caller needing to define any special handling. This allows you to handle a
 * subset of the tree, while still walking the whole tree.
 *
 * For example, to find all of the method calls that call the `foo` method, you
 * could write:
 *
 * @example
 * class FooCalls extends Visitor {
 *   visitCallNode(node) {
 *     if (node.name === "foo") {
 *       // Do something with the node
 *     }
 *
 *     // Call super so that the visitor continues walking the tree
 *     super.visitCallNode(node);
 *   }
 * }
 *
 */
export class Visitor extends BasicVisitor {
  /**
   * Visit a AliasGlobalVariableNode node.
   *
   * @param {nodes.AliasGlobalVariableNode} node
   */
  visitAliasGlobalVariableNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a AliasMethodNode node.
   *
   * @param {nodes.AliasMethodNode} node
   */
  visitAliasMethodNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a AlternationPatternNode node.
   *
   * @param {nodes.AlternationPatternNode} node
   */
  visitAlternationPatternNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a AndNode node.
   *
   * @param {nodes.AndNode} node
   */
  visitAndNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ArgumentsNode node.
   *
   * @param {nodes.ArgumentsNode} node
   */
  visitArgumentsNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ArrayNode node.
   *
   * @param {nodes.ArrayNode} node
   */
  visitArrayNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ArrayPatternNode node.
   *
   * @param {nodes.ArrayPatternNode} node
   */
  visitArrayPatternNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a AssocNode node.
   *
   * @param {nodes.AssocNode} node
   */
  visitAssocNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a AssocSplatNode node.
   *
   * @param {nodes.AssocSplatNode} node
   */
  visitAssocSplatNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BackReferenceReadNode node.
   *
   * @param {nodes.BackReferenceReadNode} node
   */
  visitBackReferenceReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BeginNode node.
   *
   * @param {nodes.BeginNode} node
   */
  visitBeginNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BlockArgumentNode node.
   *
   * @param {nodes.BlockArgumentNode} node
   */
  visitBlockArgumentNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BlockLocalVariableNode node.
   *
   * @param {nodes.BlockLocalVariableNode} node
   */
  visitBlockLocalVariableNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BlockNode node.
   *
   * @param {nodes.BlockNode} node
   */
  visitBlockNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BlockParameterNode node.
   *
   * @param {nodes.BlockParameterNode} node
   */
  visitBlockParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BlockParametersNode node.
   *
   * @param {nodes.BlockParametersNode} node
   */
  visitBlockParametersNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a BreakNode node.
   *
   * @param {nodes.BreakNode} node
   */
  visitBreakNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CallAndWriteNode node.
   *
   * @param {nodes.CallAndWriteNode} node
   */
  visitCallAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CallNode node.
   *
   * @param {nodes.CallNode} node
   */
  visitCallNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CallOperatorWriteNode node.
   *
   * @param {nodes.CallOperatorWriteNode} node
   */
  visitCallOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CallOrWriteNode node.
   *
   * @param {nodes.CallOrWriteNode} node
   */
  visitCallOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CallTargetNode node.
   *
   * @param {nodes.CallTargetNode} node
   */
  visitCallTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CapturePatternNode node.
   *
   * @param {nodes.CapturePatternNode} node
   */
  visitCapturePatternNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CaseMatchNode node.
   *
   * @param {nodes.CaseMatchNode} node
   */
  visitCaseMatchNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a CaseNode node.
   *
   * @param {nodes.CaseNode} node
   */
  visitCaseNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassNode node.
   *
   * @param {nodes.ClassNode} node
   */
  visitClassNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableAndWriteNode node.
   *
   * @param {nodes.ClassVariableAndWriteNode} node
   */
  visitClassVariableAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableOperatorWriteNode node.
   *
   * @param {nodes.ClassVariableOperatorWriteNode} node
   */
  visitClassVariableOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableOrWriteNode node.
   *
   * @param {nodes.ClassVariableOrWriteNode} node
   */
  visitClassVariableOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableReadNode node.
   *
   * @param {nodes.ClassVariableReadNode} node
   */
  visitClassVariableReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableTargetNode node.
   *
   * @param {nodes.ClassVariableTargetNode} node
   */
  visitClassVariableTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ClassVariableWriteNode node.
   *
   * @param {nodes.ClassVariableWriteNode} node
   */
  visitClassVariableWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantAndWriteNode node.
   *
   * @param {nodes.ConstantAndWriteNode} node
   */
  visitConstantAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantOperatorWriteNode node.
   *
   * @param {nodes.ConstantOperatorWriteNode} node
   */
  visitConstantOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantOrWriteNode node.
   *
   * @param {nodes.ConstantOrWriteNode} node
   */
  visitConstantOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathAndWriteNode node.
   *
   * @param {nodes.ConstantPathAndWriteNode} node
   */
  visitConstantPathAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathNode node.
   *
   * @param {nodes.ConstantPathNode} node
   */
  visitConstantPathNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathOperatorWriteNode node.
   *
   * @param {nodes.ConstantPathOperatorWriteNode} node
   */
  visitConstantPathOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathOrWriteNode node.
   *
   * @param {nodes.ConstantPathOrWriteNode} node
   */
  visitConstantPathOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathTargetNode node.
   *
   * @param {nodes.ConstantPathTargetNode} node
   */
  visitConstantPathTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantPathWriteNode node.
   *
   * @param {nodes.ConstantPathWriteNode} node
   */
  visitConstantPathWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantReadNode node.
   *
   * @param {nodes.ConstantReadNode} node
   */
  visitConstantReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantTargetNode node.
   *
   * @param {nodes.ConstantTargetNode} node
   */
  visitConstantTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ConstantWriteNode node.
   *
   * @param {nodes.ConstantWriteNode} node
   */
  visitConstantWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a DefNode node.
   *
   * @param {nodes.DefNode} node
   */
  visitDefNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a DefinedNode node.
   *
   * @param {nodes.DefinedNode} node
   */
  visitDefinedNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ElseNode node.
   *
   * @param {nodes.ElseNode} node
   */
  visitElseNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a EmbeddedStatementsNode node.
   *
   * @param {nodes.EmbeddedStatementsNode} node
   */
  visitEmbeddedStatementsNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a EmbeddedVariableNode node.
   *
   * @param {nodes.EmbeddedVariableNode} node
   */
  visitEmbeddedVariableNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a EnsureNode node.
   *
   * @param {nodes.EnsureNode} node
   */
  visitEnsureNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a FalseNode node.
   *
   * @param {nodes.FalseNode} node
   */
  visitFalseNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a FindPatternNode node.
   *
   * @param {nodes.FindPatternNode} node
   */
  visitFindPatternNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a FlipFlopNode node.
   *
   * @param {nodes.FlipFlopNode} node
   */
  visitFlipFlopNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a FloatNode node.
   *
   * @param {nodes.FloatNode} node
   */
  visitFloatNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ForNode node.
   *
   * @param {nodes.ForNode} node
   */
  visitForNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ForwardingArgumentsNode node.
   *
   * @param {nodes.ForwardingArgumentsNode} node
   */
  visitForwardingArgumentsNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ForwardingParameterNode node.
   *
   * @param {nodes.ForwardingParameterNode} node
   */
  visitForwardingParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ForwardingSuperNode node.
   *
   * @param {nodes.ForwardingSuperNode} node
   */
  visitForwardingSuperNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableAndWriteNode node.
   *
   * @param {nodes.GlobalVariableAndWriteNode} node
   */
  visitGlobalVariableAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableOperatorWriteNode node.
   *
   * @param {nodes.GlobalVariableOperatorWriteNode} node
   */
  visitGlobalVariableOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableOrWriteNode node.
   *
   * @param {nodes.GlobalVariableOrWriteNode} node
   */
  visitGlobalVariableOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableReadNode node.
   *
   * @param {nodes.GlobalVariableReadNode} node
   */
  visitGlobalVariableReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableTargetNode node.
   *
   * @param {nodes.GlobalVariableTargetNode} node
   */
  visitGlobalVariableTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a GlobalVariableWriteNode node.
   *
   * @param {nodes.GlobalVariableWriteNode} node
   */
  visitGlobalVariableWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a HashNode node.
   *
   * @param {nodes.HashNode} node
   */
  visitHashNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a HashPatternNode node.
   *
   * @param {nodes.HashPatternNode} node
   */
  visitHashPatternNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IfNode node.
   *
   * @param {nodes.IfNode} node
   */
  visitIfNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ImaginaryNode node.
   *
   * @param {nodes.ImaginaryNode} node
   */
  visitImaginaryNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ImplicitNode node.
   *
   * @param {nodes.ImplicitNode} node
   */
  visitImplicitNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ImplicitRestNode node.
   *
   * @param {nodes.ImplicitRestNode} node
   */
  visitImplicitRestNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InNode node.
   *
   * @param {nodes.InNode} node
   */
  visitInNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IndexAndWriteNode node.
   *
   * @param {nodes.IndexAndWriteNode} node
   */
  visitIndexAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IndexOperatorWriteNode node.
   *
   * @param {nodes.IndexOperatorWriteNode} node
   */
  visitIndexOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IndexOrWriteNode node.
   *
   * @param {nodes.IndexOrWriteNode} node
   */
  visitIndexOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IndexTargetNode node.
   *
   * @param {nodes.IndexTargetNode} node
   */
  visitIndexTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableAndWriteNode node.
   *
   * @param {nodes.InstanceVariableAndWriteNode} node
   */
  visitInstanceVariableAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableOperatorWriteNode node.
   *
   * @param {nodes.InstanceVariableOperatorWriteNode} node
   */
  visitInstanceVariableOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableOrWriteNode node.
   *
   * @param {nodes.InstanceVariableOrWriteNode} node
   */
  visitInstanceVariableOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableReadNode node.
   *
   * @param {nodes.InstanceVariableReadNode} node
   */
  visitInstanceVariableReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableTargetNode node.
   *
   * @param {nodes.InstanceVariableTargetNode} node
   */
  visitInstanceVariableTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InstanceVariableWriteNode node.
   *
   * @param {nodes.InstanceVariableWriteNode} node
   */
  visitInstanceVariableWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a IntegerNode node.
   *
   * @param {nodes.IntegerNode} node
   */
  visitIntegerNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InterpolatedMatchLastLineNode node.
   *
   * @param {nodes.InterpolatedMatchLastLineNode} node
   */
  visitInterpolatedMatchLastLineNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InterpolatedRegularExpressionNode node.
   *
   * @param {nodes.InterpolatedRegularExpressionNode} node
   */
  visitInterpolatedRegularExpressionNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InterpolatedStringNode node.
   *
   * @param {nodes.InterpolatedStringNode} node
   */
  visitInterpolatedStringNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InterpolatedSymbolNode node.
   *
   * @param {nodes.InterpolatedSymbolNode} node
   */
  visitInterpolatedSymbolNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a InterpolatedXStringNode node.
   *
   * @param {nodes.InterpolatedXStringNode} node
   */
  visitInterpolatedXStringNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ItLocalVariableReadNode node.
   *
   * @param {nodes.ItLocalVariableReadNode} node
   */
  visitItLocalVariableReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ItParametersNode node.
   *
   * @param {nodes.ItParametersNode} node
   */
  visitItParametersNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a KeywordHashNode node.
   *
   * @param {nodes.KeywordHashNode} node
   */
  visitKeywordHashNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a KeywordRestParameterNode node.
   *
   * @param {nodes.KeywordRestParameterNode} node
   */
  visitKeywordRestParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LambdaNode node.
   *
   * @param {nodes.LambdaNode} node
   */
  visitLambdaNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableAndWriteNode node.
   *
   * @param {nodes.LocalVariableAndWriteNode} node
   */
  visitLocalVariableAndWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableOperatorWriteNode node.
   *
   * @param {nodes.LocalVariableOperatorWriteNode} node
   */
  visitLocalVariableOperatorWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableOrWriteNode node.
   *
   * @param {nodes.LocalVariableOrWriteNode} node
   */
  visitLocalVariableOrWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableReadNode node.
   *
   * @param {nodes.LocalVariableReadNode} node
   */
  visitLocalVariableReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableTargetNode node.
   *
   * @param {nodes.LocalVariableTargetNode} node
   */
  visitLocalVariableTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a LocalVariableWriteNode node.
   *
   * @param {nodes.LocalVariableWriteNode} node
   */
  visitLocalVariableWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MatchLastLineNode node.
   *
   * @param {nodes.MatchLastLineNode} node
   */
  visitMatchLastLineNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MatchPredicateNode node.
   *
   * @param {nodes.MatchPredicateNode} node
   */
  visitMatchPredicateNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MatchRequiredNode node.
   *
   * @param {nodes.MatchRequiredNode} node
   */
  visitMatchRequiredNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MatchWriteNode node.
   *
   * @param {nodes.MatchWriteNode} node
   */
  visitMatchWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MissingNode node.
   *
   * @param {nodes.MissingNode} node
   */
  visitMissingNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ModuleNode node.
   *
   * @param {nodes.ModuleNode} node
   */
  visitModuleNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MultiTargetNode node.
   *
   * @param {nodes.MultiTargetNode} node
   */
  visitMultiTargetNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a MultiWriteNode node.
   *
   * @param {nodes.MultiWriteNode} node
   */
  visitMultiWriteNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a NextNode node.
   *
   * @param {nodes.NextNode} node
   */
  visitNextNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a NilNode node.
   *
   * @param {nodes.NilNode} node
   */
  visitNilNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a NoKeywordsParameterNode node.
   *
   * @param {nodes.NoKeywordsParameterNode} node
   */
  visitNoKeywordsParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a NumberedParametersNode node.
   *
   * @param {nodes.NumberedParametersNode} node
   */
  visitNumberedParametersNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a NumberedReferenceReadNode node.
   *
   * @param {nodes.NumberedReferenceReadNode} node
   */
  visitNumberedReferenceReadNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a OptionalKeywordParameterNode node.
   *
   * @param {nodes.OptionalKeywordParameterNode} node
   */
  visitOptionalKeywordParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a OptionalParameterNode node.
   *
   * @param {nodes.OptionalParameterNode} node
   */
  visitOptionalParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a OrNode node.
   *
   * @param {nodes.OrNode} node
   */
  visitOrNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ParametersNode node.
   *
   * @param {nodes.ParametersNode} node
   */
  visitParametersNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ParenthesesNode node.
   *
   * @param {nodes.ParenthesesNode} node
   */
  visitParenthesesNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a PinnedExpressionNode node.
   *
   * @param {nodes.PinnedExpressionNode} node
   */
  visitPinnedExpressionNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a PinnedVariableNode node.
   *
   * @param {nodes.PinnedVariableNode} node
   */
  visitPinnedVariableNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a PostExecutionNode node.
   *
   * @param {nodes.PostExecutionNode} node
   */
  visitPostExecutionNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a PreExecutionNode node.
   *
   * @param {nodes.PreExecutionNode} node
   */
  visitPreExecutionNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ProgramNode node.
   *
   * @param {nodes.ProgramNode} node
   */
  visitProgramNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RangeNode node.
   *
   * @param {nodes.RangeNode} node
   */
  visitRangeNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RationalNode node.
   *
   * @param {nodes.RationalNode} node
   */
  visitRationalNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RedoNode node.
   *
   * @param {nodes.RedoNode} node
   */
  visitRedoNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RegularExpressionNode node.
   *
   * @param {nodes.RegularExpressionNode} node
   */
  visitRegularExpressionNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RequiredKeywordParameterNode node.
   *
   * @param {nodes.RequiredKeywordParameterNode} node
   */
  visitRequiredKeywordParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RequiredParameterNode node.
   *
   * @param {nodes.RequiredParameterNode} node
   */
  visitRequiredParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RescueModifierNode node.
   *
   * @param {nodes.RescueModifierNode} node
   */
  visitRescueModifierNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RescueNode node.
   *
   * @param {nodes.RescueNode} node
   */
  visitRescueNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RestParameterNode node.
   *
   * @param {nodes.RestParameterNode} node
   */
  visitRestParameterNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a RetryNode node.
   *
   * @param {nodes.RetryNode} node
   */
  visitRetryNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ReturnNode node.
   *
   * @param {nodes.ReturnNode} node
   */
  visitReturnNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SelfNode node.
   *
   * @param {nodes.SelfNode} node
   */
  visitSelfNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a ShareableConstantNode node.
   *
   * @param {nodes.ShareableConstantNode} node
   */
  visitShareableConstantNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SingletonClassNode node.
   *
   * @param {nodes.SingletonClassNode} node
   */
  visitSingletonClassNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SourceEncodingNode node.
   *
   * @param {nodes.SourceEncodingNode} node
   */
  visitSourceEncodingNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SourceFileNode node.
   *
   * @param {nodes.SourceFileNode} node
   */
  visitSourceFileNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SourceLineNode node.
   *
   * @param {nodes.SourceLineNode} node
   */
  visitSourceLineNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SplatNode node.
   *
   * @param {nodes.SplatNode} node
   */
  visitSplatNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a StatementsNode node.
   *
   * @param {nodes.StatementsNode} node
   */
  visitStatementsNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a StringNode node.
   *
   * @param {nodes.StringNode} node
   */
  visitStringNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SuperNode node.
   *
   * @param {nodes.SuperNode} node
   */
  visitSuperNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a SymbolNode node.
   *
   * @param {nodes.SymbolNode} node
   */
  visitSymbolNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a TrueNode node.
   *
   * @param {nodes.TrueNode} node
   */
  visitTrueNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a UndefNode node.
   *
   * @param {nodes.UndefNode} node
   */
  visitUndefNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a UnlessNode node.
   *
   * @param {nodes.UnlessNode} node
   */
  visitUnlessNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a UntilNode node.
   *
   * @param {nodes.UntilNode} node
   */
  visitUntilNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a WhenNode node.
   *
   * @param {nodes.WhenNode} node
   */
  visitWhenNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a WhileNode node.
   *
   * @param {nodes.WhileNode} node
   */
  visitWhileNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a XStringNode node.
   *
   * @param {nodes.XStringNode} node
   */
  visitXStringNode(node) {
    this.visitChildNodes(node);
  }

  /**
   * Visit a YieldNode node.
   *
   * @param {nodes.YieldNode} node
   */
  visitYieldNode(node) {
    this.visitChildNodes(node);
  }
}
